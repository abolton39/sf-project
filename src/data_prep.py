import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler


def clean_data(input_data):
    """
    Cleans data by removing $, %, ), (, and ,.
    """
    input_data['x12'] = input_data['x12'].str.replace('$','')
    input_data['x12'] = input_data['x12'].str.replace(',','')
    input_data['x12'] = input_data['x12'].str.replace(')','')
    input_data['x12'] = input_data['x12'].str.replace('(','-')
    input_data['x12'] = input_data['x12'].astype(float)
    input_data['x63'] = input_data['x63'].str.replace('%','')
    input_data['x63'] = input_data['x63'].astype(float)
    return input_data

def impute_data(input_data):
    """
    Imputes empty values by calculating mean.
    """
    imputer = SimpleImputer(missing_values = pd.NA, strategy = 'mean')
    data_imputed = pd.DataFrame(imputer.fit_transform(input_data.drop(columns=['y', 'x5', 'x31', 'x81', 'x82'])), 
                                     columns=input_data.drop(columns=['y', 'x5', 'x31', 'x81', 'x82']).columns)
    return data_imputed, imputer

def scale_data(input_data):
    """
    Scales the data.
    """
    std_scaler = StandardScaler()
    data_std = pd.DataFrame(std_scaler.fit_transform(input_data), columns=input_data.columns)
    return data_std, std_scaler

def create_dummies(input_data, data_std):
    """
    1 hot for non-numeric columns.
    """
    for col in ['x5', 'x31', 'x81', 'x82']:
        dummies = pd.get_dummies(input_data[col], drop_first=True, prefix=col, prefix_sep='_', dummy_na=True)
        data_std = pd.concat([data_std, dummies], axis=1, sort=False)
    return data_std

def convert_bool_to_numeric(input_data, variables):
    """
    Converts boolean columns to numeric.
    """
    for col in variables:
        if input_data[col].dtype == 'bool':
            input_data[col] = input_data[col].astype(int)
    return input_data

def add_missing_columns(input_data, columns, default_value=0):
    """
    Adds missing columns for inference data. Needed for smaller API calls where all columns were not generated by 1 hot.
    """
    for column in columns:
        if column not in input_data.columns:
            input_data[column] = default_value
    return input_data